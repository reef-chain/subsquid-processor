type ChainInfo @entity {
  "Name"
  id: ID!
  count: Int!
}

type Block @entity @index(fields: ["height", "id"], unique: true) {
  "000000..00<blockNum>-<shorthash>"
  id: ID!
  height: Int! @index @unique
  hash: String! @index @unique
  author: String!
  stateRoot: String!
  parentHash: String!
  extrinsicRoot: String!
  finalized: Boolean! @index
  timestamp: DateTime!
  processorTimestamp: DateTime
  extrinsics: [Extrinsic!] @derivedFrom(field: "block")
  events: [Event!] @derivedFrom(field: "block")
  accounts: [Account!] @derivedFrom(field: "block")
}

type Extrinsic @entity @index(fields: ["timestamp", "id"], unique: true) @index(fields: ["index", "block"], unique: true) {
  "000000..00<blockNum>-000<index>-<shorthash>"
  id: ID!
  block: Block!
  index: Int! @index
  hash: String! @index @unique
  args: JSON!
  docs: String!
  method: String! @index
  section: String! @index
  signer: String! @index
  status: ExtrinsicStatus!
  errorMessage: String
  type: ExtrinsicType!
  signedData: JSON
  timestamp: DateTime! @index
  events: [Event!] @derivedFrom(field: "extrinsic")
  contracts: [Contract!] @derivedFrom(field: "extrinsic") 
  # An extrinsic can have only one contract, it is required to use an array for the precompiled contracts, that reference the same virtual extrinsic with id -1.
}

type Event @entity @index(fields: ["id", "block"], unique: true) @index(fields: ["extrinsic", "index"], unique: true) @index(fields: ["block", "index", "extrinsic"], unique: true) {
  "000000..00<blockNum>-000<index>-<shorthash>"
  id: ID!
  extrinsic: Extrinsic!
  block: Block!
  index: Int! @index
  phase: String!
  section: String! @index
  method: String! @index
  data: JSON!
  timestamp: DateTime!
}

type Account @entity @index(fields: ["freeBalance", "id"], unique: true) {
  "Native address"
  id: ID!
  evmAddress: String @index
  block: Block!
  identity: JSON
  active: Boolean! @index
  freeBalance: BigInt! @index
  lockedBalance: BigInt!
  availableBalance: BigInt!
  reservedBalance: BigInt!
  vestedBalance: BigInt!
  votingBalance: BigInt!
  nonce: Int!
  evmNonce: Int!
  timestamp: DateTime!
  contracts: [Contract!] @derivedFrom(field: "signer")
}

type Contract @entity @index(fields: ["extrinsic", "id"], unique: true) {
  "Address"
  id: ID!
  extrinsic: Extrinsic!
  signer: Account!
  bytecode: String!
  bytecodeContext: String!
  bytecodeArguments: String!
  gasLimit: BigInt!
  storageLimit: BigInt!
  timestamp: DateTime!
}

type EvmEvent @entity {
  "000000..00<blockNum>-000<index>-<shorthash>"
  id: ID!
  event: Event!
  block: Block!
  eventIndex: Int!
  extrinsicIndex: Int!
  contractAddress: String! @index
  dataRaw: JSON!
  dataParsed: JSON!
  method: String! @index
  type: EvmEventType! @index
  status: EvmEventStatus! @index
  topic0: String @index
  topic1: String @index
  topic2: String @index
  topic3: String @index
}

# ================ Token transfers ========================

type Transfer @entity @index(fields: ["id", "extrinsic"], unique: true) @index (fields: ["id", "event"], unique: true) {
  id: ID!
  block: Block!
  extrinsic: Extrinsic!
  event: Event!
  to: Account!
  from: Account!
  token: VerifiedContract!
  toEvmAddress: String @index
  fromEvmAddress: String @index
  type: TransferType!
  amount: BigInt! @index
  feeAmount: BigInt! @index
  denom: String @index
  nftId: BigInt @index
  errorMessage: String
  success: Boolean! @index
  timestamp: DateTime! @index
}

type TokenHolder @entity @index(fields: ["token", "signer", "nftId"], unique: true) {
  "<tokenAddress>-<signerAddress>-<nftId>"
  id: ID!
  token: VerifiedContract!
  signer: Account
  evmAddress: String @index
  nftId: BigInt
  type: TokenHolderType!
  balance: BigInt! @index
  timestamp: DateTime!
}

# =============== Contract verification ===================

type NewlyVerifiedContractQueue @entity {
  id: ID!
}

type VerificationRequest @entity {
  "Address"
  id: ID!
  name: String! @index
  filename: String @index
  source: JSON!
  optimization: Boolean!
  compilerVersion: String!
  args: JSON!
  runs: Int!
  target: String!
  success: Boolean! @index
  message: String
  license: String
  timestamp: DateTime
}

type VerifiedContract @entity @index(fields: ["contract", "type"], unique: true) @index(fields: ["contract", "id"], unique: true) {
  "Address"
  id: ID!
  contract: Contract!
  name: String! @index
  filename: String @index
  source: JSON!
  optimization: Boolean!
  compilerVersion: String!
  compiledData: JSON!
  args: JSON!
  runs: Int!
  target: String!
  type: ContractType @index
  contractData: JSON
  license: String
  timestamp: DateTime @index
  approved: Boolean @index
}

# ===================== Staking ===========================

type Staking @entity {
  id: ID!
  signer: Account
  event: Event
  type: StakingType! @index
  amount: BigInt! 
  timestamp: DateTime!
}

# ===================== Pusher ============================

type PusherMessage @entity {
  "Block ID"
  id: ID!
  data: String!
}

# ===================== Enums =============================

enum EvmEventType {
  Verified, 
  Unverified
}

enum EvmEventStatus {
  Success, 
  Error
}

enum ContractType {
  ERC20, 
  ERC721, 
  ERC1155,
  other
}

enum TransferType {
  Native, 
  ERC20, 
  ERC721, 
  ERC1155
}

enum TokenHolderType {
  Account, 
  Contract
}

enum StakingType {
  Reward, 
  Slash
}

enum PoolType {
  Mint, 
  Burn, 
  Swap, 
  Sync, 
  Transfer
}

enum ExtrinsicStatus {
  success, 
  error, 
  unknown
}

enum ExtrinsicType {
  signed, 
  unsigned, 
  inherent
}